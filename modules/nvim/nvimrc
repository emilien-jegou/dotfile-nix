if &compatible
  set nocompatible
endif

execute pathogen#infect()

let $NVIM_TUI_ENABLE_CURSOR_SHAPE = 1
filetype plugin on
filetype indent off
syntax on
syntax enable

""" PYTHON PATH
let g:python3_host_prog = '/usr/bin/python'
let g:python_host_prog  = '/usr/bin/python2'

"""""" CUSTOM
nnoremap <Space> <Nop>
let mapleader = " "

map <C-s> :w<cr>
map <C-q> :q<cr>
"map z :!
map <C-k> 5k
map <C-j> 5j
map <C-h> ^
map <C-l> $
map <leader>q <Nop>
map <leader>Q <Nop>
map <leader><leader> <Space>

nmap <leader>F6 :setlocal spell! spelllang=

nnoremap Q <NOP>
nnoremap q <NOP>
map q q

nnoremap <silent> tn :e /tmp/scratch<CR>
nnoremap <silent> tl :bnext<CR>
nnoremap <silent> th :bprev<CR>
nnoremap <silent> tj :bfirst<CR>
nnoremap <silent> tk :blast<CR>
nnoremap <silent> td :bwipeout!<CR>
nnoremap <silent> <leader>n :let @/=''<CR>
vnoremap <C-c> <Esc>
inoremap <C-c> <Esc>
nnoremap <C-c> <Esc>
inoremap <C-j> <Esc><C-j>
inoremap <C-k> <Esc><C-k>

map <C-y> "+y<cr>
map <C-x> "+d<cr>
map <C-p> "+p<cr>

map qd gg=G<C-o>
autocmd FileType rust map qd :Format<cr>

let &showbreak = '↳'

highlight ColorColumn ctermbg=0
highlight Todo term=NONE cterm=bold ctermfg=Cyan ctermbg=16
highlight PmenuSel ctermbg=0 ctermfg=14
highlight Pmenu ctermbg=0 ctermfg=8

set encoding=utf-8
set splitbelow
set splitright
set listchars=tab:·\ ,trail:•,precedes:❮,extends:❯
set list
set title
set ruler
set wrap
set textwidth=0
set wrapmargin=0
set scrolloff=5
set ignorecase " Ignore case
set smartcase  " Si majuscule -> case
set incsearch  " Surligne pendant la saisie
set hlsearch
set visualbell
set noerrorbells
set t_vb=
set backspace=indent,eol,start
set hidden
set number relativenumber!
set backup
set backupdir=/tmp
set directory=/tmp
set ff=unix
set mouse=
set termguicolors
set tabstop=2 shiftwidth=2 expandtab

""" Code Folding
set foldmethod=syntax
set foldnestmax=10
set nofoldenable
set foldlevel=2
set paste

au BufNewFile,BufRead *.ejs set filetype=html
au BufNewFile,BufRead *.blade.php set filetype=html
au BufRead,BufNewFile *.jar,*.war,*.ear,*.sar,*.rar set filetype=zip
au BufReadCmd *.jar call zip#Browse(expand("<amatch>"))

fu! Daily()
  let l:path=$HOME.'/daily/'.strftime('%Y-%m-%d').'.txt'
  silent execute('!'.$HOME.'/daily/.clear_empty_notes.sh')
  silent execute('!touch ' . l:path)
  execute ':e ' l:path
endfunction

nnoremap <silent> <M-d> :call Daily()<cr>

colorscheme weynot2

""""" PLUGINS

" vim-fugitive
nmap <leader>gr :Gread<cr>
nmap <leader>gd :Gdiff<cr>
nmap <leader>ga :Gwrite<cr>
nmap <leader>gb :Gbrowse<cr>

" vim-easyclip
let g:EasyClipShareYanks = 1

" fzf.vim
nnoremap tt :Files<CR>
nnoremap ta :Ag<CR>
noremap <leader>s :Ag (\/\/\| \/\*)[ ]*(TODO\|BUG\|FIXME)<cr>

""" vim-gitgutter
let g:gitgutter_sign_added = '•'
let g:gitgutter_sign_modified = '❯'
let g:gitgutter_sign_removed = '•'
let g:gitgutter_sign_removed_first_line = '❮'
let g:gitgutter_sign_modified_removed = '❮'

""" tmuxline
let g:airline#extensions#tmuxline#enabled = 0
let g:airline#extensions#vista#enabled = 0

""" vim-tmux-navigator
let g:tmux_navigator_no_mappings = 1

nnoremap <silent> <M-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <M-j> :TmuxNavigateDown<cr>
nnoremap <silent> <M-k> :TmuxNavigateUp<cr>
nnoremap <silent> <M-l> :TmuxNavigateRight<cr>
nnoremap <silent> <M-;> :TmuxNavigatePrevious<cr>

let g:tmux_navigator_disable_when_zoomed = 1

""" vim-tmux-resizer
let g:tmux_resizer_no_mappings = 1
nnoremap <silent> <M-H> :TmuxResizeLeft<cr>
nnoremap <silent> <M-J> :TmuxResizeDown<cr>
nnoremap <silent> <M-K> :TmuxResizeUp<cr>
nnoremap <silent> <M-L> :TmuxResizeRight<cr>

""" suda - sudo edit
cnoreabbrev ws w suda://%

""" vim notes
let g:notes_suffix = '.txt'
let g:notes_directories = [ '~/Daily/' ]
let g:notes_list_bullets = ['∙', '◦', '▸', '▹', '▪', '▫']

autocmd BufNewFile,BufRead */.git/COMMIT_EDITMSG setlocal filetype=notes " git commit messages now have notes formatting

""" jsx
let g:jsx_ext_required = 0
let g:vim_jsx_pretty_colorful_config = 1 " default 0

highlight jsxPunct ctermbg=NONE ctermfg=9
highlight jsxCloseString ctermbg=NONE ctermfg=9

""" coc

" Some servers have issues with backup files, see #649
set nobackup
set nowritebackup

" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=150

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show two signcolumns
set signcolumn=yes:2

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" sqlcomplete
let g:loaded_sql_completion = 0
let g:omni_sql_no_default_maps = 1

" highlight under cursor
function! SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

" FIXME: hardcoded color should be in theme
hi CocFloating guibg=#1A1A1A

" fix on rust yield
hi! def link rustReservedKeyword Keyword

function! s:find_duplicate()
  execute '/^\(.*\)$\n\1$'
endfunction

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

" TODO: install extension from coc configuration file
" Plug 'neoclide/coc-tsserver', {'do': 'yarn install --frozen-lockfile'}
function! CocInstallExtensions()
  CocInstall coc-eslint coc-json coc-emoji coc-tsserver coc-rust-analyzer coc-phpls
endfunction

nmap <silent> , <Plug>(coc-codeaction-selected)<cr>
xmap <silent> , <Plug>(coc-codeaction-selected)<cr>

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

nmap ;f :call CocActionAsync('refactor')<cr>
nmap ;r :CocCommand document.renameCurrentWord<cr>

" Use <TAB> for select selections ranges, needs server support, like: coc-tsserver, coc-python
nmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <TAB> <Plug>(coc-range-select)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

hi CocErrorHighlight ctermbg=NONE ctermfg=6 gui=underline
hi CocErrorSign ctermfg=6 guifg=#fc3423
hi CocWarningSign ctermfg=4 guifg=#fc8623
hi CocWarningHighlight ctermfg=4 guifg=#fc8623
hi CocFloating guibg=#141414 guifg=#ffffff

hi rustCommentLineDoc gui=bold guifg=#454159

let g:htl_css_templates = 1

""" lf
let g:lf_replace_netrw = 1 " Open lf when vim opens a directory

" hide the sidebar when lf is open
autocmd! TermOpen
autocmd  TermOpen * setlocal laststatus=0 noruler norelativenumber nonumber signcolumn=no
      \| autocmd BufLeave <buffer> setlocal laststatus=2 ruler number relativenumber signcolumn=yes:2

""" tsuqoyomi
let g:tsuquyomi_disable_quickfix = 1

""" NerdCommenter
vmap \ :call nerdcommenter#Comment('x', 'toggle')<cr>
nmap \ V:call nerdcommenter#Comment('x', 'toggle')<cr>

vmap <M-]> >gv
vmap <M-[> <gv

imap <M-]> <c-t>
imap <M-[> <c-d>

map <c-y> "+y
map <c-x> "+d
map <c-p> "+p

let g:ft = ''

""" vim-airline
let g:airline_theme='weynot_airline'
let g:airline_powerline_fonts = 1

let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_buffers = 1

let g:airline#extensions#tabline#show_tab_nr = 0
let g:airline#extensions#tabline#buffer_nr_show = 0
let g:airline#extensions#tabline#fnamecollapse = 0
let g:airline#extensions#tabline#formatter = 'jsformatter'

""" easyalign
map < :EasyAlign<cr>

""" Gtags

" enable gtags module
let g:gutentags_modules = ['ctags', 'gtags_cscope']

" config project root markers.
let g:gutentags_project_root = ['.root']

" generate datebases in my cache directory, prevent gtags files polluting my project
let g:gutentags_cache_dir = expand('~/.cache/tags')

" change focus to quickfix window after search (optional).
let g:gutentags_plus_switch = 1

let g:gutentags_plus_nomap = 1

noremap <silent> qs :GscopeFind s <C-R><C-W><cr>    " Find symbol (reference) under cursor
noremap <silent> qs :GscopeFind g <C-R><C-W><cr>    " Find symbol definition under cursor
noremap <silent> qc :GscopeFind c <C-R><C-W><cr>    " Functions called by this function
noremap <silent> qa :GscopeFind a <C-R><C-W><cr>    " Find places where current symbol is assigned

map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
      \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
      \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

" FIXME: the directory is empty right now
let g:neosnippet#snippets_directory='~/.nvim/snippets'
set completeopt-=preview

imap <C-.>   <Plug>(neosnippet_expand_or_jump)
smap <C-.>   <Plug>(neosnippet_expand_or_jump)
xmap <C-.>   <Plug>(neosnippet_expand_target)

""" goyo
let g:goyo_width = 120

let g:prettier#config#use_tabs = 'false'

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

""" prettier
autocmd BufNewFile,BufRead *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.md,*.vue,*.yaml,*.html map qd :PrettierAsync<cr>

let g:prettier#config#use_tabs = 'false'
let g:prettier#autoformat_config_files = ['~/.prettierc.js']

autocmd BufNewFile,BufRead */.git/COMMIT_EDITMSG setlocal filetype=notes
autocmd BufNewFile,BufRead *.txt setlocal filetype=notes

""" tagbar
map qe :Tagbar<cr>

"""""" LANGUAGES

""" typescript
autocmd BufNewFile,BufRead *.tsx,*.jsx set filetype=typescriptreact

""" notes & txt
autocmd BufNewFile,BufRead COMMIT_EDITMSG setlocal textwidth=72 " 80 - 2 char for quotes
autocmd BufNewFile,BufRead COMMIT_EDITMSG setlocal colorcolumn=73 " textwidth + 1
autocmd BufNewFile,BufRead *.txt setlocal textwidth=80

autocmd BufNewFile,BufRead *.txt setlocal textwidth=99
autocmd BufNewFile,BufRead *.txt setlocal colorcolumn=100
autocmd BufNewFile,BufRead *.txt setlocal textwidth=100

""" git-messenger
map qf <Plug>(git-messenger)


""" vim-vue-plugin
"let g:vim_vue_plugin_load_full_syntax = 0
"let g:vim_vue_plugin_has_init_indent = 0
"let g:vim_vue_plugin_use_scss = 1

""" dart
"let g:dart_style_guide = 2
"let g:dart_format_on_save = 1

""" Flutter
"autocmd FileType dart map qd :DartFmt<CR>
"autocmd FileType dart map zr :FlutterRun<CR>
"autocmd FileType dart map zs :FlutterVSplit<CR>

